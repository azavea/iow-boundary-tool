# Generated by Django 3.2.13 on 2022-09-29 22:41

import os
import json
from django.conf import settings
from django.db import migrations
from django.contrib.gis.geos import MultiPolygon, Polygon


def add_other_states(apps, schema_editor):
    State = apps.get_model('api', 'State')

    with open(os.path.join(settings.BASE_DIR, 'data/state_boundaries.geojson'), 'r') as f:
        boundaries = json.load(f)

    for boundary in boundaries['features']:
        id = boundary['properties']['STUSPS']
        name = boundary['properties']['NAME']

        type = boundary['geometry']['type']
        if type == 'Polygon':
            shape = MultiPolygon([
                Polygon(*boundary['geometry']['coordinates'])
            ])
        elif type == 'MultiPolygon':
            shape = MultiPolygon([
                Polygon(*polygon) for polygon in boundary['geometry']['coordinates']
            ])
        else:
            raise ValueError('Unexpected geometry type: {}'.format(type))

        if id == 'NC':
            State.objects.filter(id='NC').update(
                name=name,
                shape=shape
            )
        else:
            State.objects.create(
                id=id,
                name=name,
                shape=shape
            )


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0014_refactor_role'),
    ]

    operations = [
        migrations.RunPython(add_other_states, migrations.RunPython.noop),
    ]
